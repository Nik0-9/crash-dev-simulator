openapi: 3.0.3
info:
  title: API Gestione Eventi Telematici
  description: |-
    API per ricevere, elaborare e registrare eventi telematici (es. incidenti stradali) provenienti da dispositivi.
    Il servizio segue un'architettura di logging strutturato:
    1. Riceve un payload di base (`CrashReportPayload`).
    2. Arricchisce il dato con informazioni di audit (es. `receivedAt`) e di elaborazione (es. le azioni intraprese dal dispatcher di emergenza).
    3. Salva un oggetto JSON composito e strutturato in un database per future analisi.
  version: "1.2.0"
servers:
  - url: http://localhost:8080/api/v1
    description: Server di sviluppo locale

paths:
  /events/crash-report:
    post:
      tags:
        - Event Reporting
      summary: Registra un nuovo evento di incidente
      description: |-
        Riceve i dati di un incidente, li elabora per determinare le azioni di emergenza necessarie (es. chiamata VOIP, invio ambulanza), e salva un log completo e strutturato dell'evento e delle azioni intraprese.
        La risposta è `202 Accepted` per indicare che la richiesta è stata presa in carico ed elaborata con successo.
      requestBody:
        description: Dati dell'evento di incidente inviati dal dispositivo telematico.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrashReportPayload'
      responses:
        '202':
          description: Evento accettato, elaborato e registrato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    type: integer
                    format: int64
                    description: "L'ID univoco generato dal database per questo record di log."
                  status:
                    type: string
                    example: "PROCESSED_AND_LOGGED"
        '400':
          description: Dati di input non validi (es. campi obbligatori mancanti).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Errore interno del server durante l'elaborazione o il salvataggio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/critical-reports:
    get:
      tags:
        - Event Reporting
      summary: Recupera tutti gli eventi con gravità CRITICAL
      description: |-
        Restituisce una lista di tutti i record di log dove la gravità dell'incidente (`jsonData.originalPayload.severity`) è "CRITICAL".
        La query viene eseguita direttamente sul campo JSONB nel database.
      responses:
        '200':
          description: Una lista di record di eventi critici. La lista può essere vuota.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLogRecord'
        '500':
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/logs:
    delete:
      tags:
        - Log Management
      summary: Elimina tutti i log per un utente specifico
      description: Elimina tutti i record di log dal database che corrispondono al parametro `user`. Operazione potenzialmente distruttiva.
      parameters:
        - name: user
          in: query
          required: true
          description: L'identificativo dell'utente per cui eliminare i log (es. 'nicola_filannino').
          schema:
            type: string
      responses:
        '200':
          description: Operazione di eliminazione completata.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    description: L'utente per cui sono stati eliminati i log.
                  deletedCount:
                    type: integer
                    description: Il numero di record eliminati.
        '400':
          description: Il parametro di query 'user' è mancante o vuoto.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Il parametro 'user' non può essere vuoto."
        '500':
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Schema per il payload in input, basato su CrashReportPayload.java
    CrashReportPayload:
      type: object
      description: Rappresenta i dati grezzi inviati da un dispositivo telematico a seguito di un incidente.
      required:
        - deviceId
        - eventTimestamp
        - location
        - severity
      properties:
        deviceId:
          type: string
          description: ID univoco del dispositivo telematico.
          example: "DEV-ABC-123"
        vehicleLicensePlate:
          type: string
          description: Targa del veicolo (opzionale).
          example: "GA123BC"
        eventTimestamp:
          type: string
          format: date-time
          description: Data e ora UTC dell'incidente (formato ISO 8601 con offset).
          example: "2024-05-23T10:30:00Z"
        location:
          type: object
          description: Coordinate geografiche dell'incidente.
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
          example:
            latitude: 45.4642
            longitude: 9.1900
        severity:
          type: string
          description: Gravità stimata dell'impatto.
          enum: [LOW, MEDIUM, HIGH, CRITICAL, UNKNOWN]
          example: "HIGH"
        gForce:
          type: number
          format: double
          description: Forza G massima registrata (opzionale).
          example: 5.2

    # Schema per un singolo record di log, basato su EventLogRecord.java
    EventLogRecord:
      type: object
      description: Rappresenta un singolo record di log come restituito dal database.
      properties:
        id:
          type: integer
          format: int64
        user:
          type: string
          example: "nicola_filannino"
        receivedAt:
          type: string
          format: date-time
          description: Timestamp dell'evento estratto dal payload originale per convenienza.
        jsonData:
          $ref: '#/components/schemas/FullLogEntry'

    # Schema che descrive la struttura completa salvata nella colonna 'json'
    FullLogEntry:
      type: object
      description: La struttura completa dell'oggetto salvato nella colonna JSONB, che include i dati originali e quelli di arricchimento.
      properties:
        audit:
          type: object
          properties:
            receivedAt:
              type: string
              format: date-time
              description: Timestamp di quando il server ha ricevuto l'evento.
        originalPayload:
          $ref: '#/components/schemas/CrashReportPayload'
        processing:
          type: object
          properties:
            status:
              type: string
              example: "COMPLETED"
            completedAt:
              type: string
              format: date-time
              description: Timestamp di quando il server ha finito di elaborare l'evento.
            actions:
              type: array
              items:
                $ref: '#/components/schemas/ProcessingAction'

    # Schema per una singola azione di emergenza
    ProcessingAction:
      type: object
      description: Descrive una singola azione intrapresa dal sistema di dispatch.
      properties:
        actionType:
          type: string
          description: Il tipo di azione eseguita.
          example: "DISPATCH_AMBULANCE"
        target:
          type: string
          description: L'obiettivo dell'azione.
          example: "event_location"
        timestamp:
          type: string
          format: date-time
          description: Il timestamp esatto in cui l'azione è stata eseguita.
        details:
          type: string
          description: Una descrizione testuale dell'azione.
          example: "Simulazione invio AMBULANZA alle coordinate: Lat 45.4642, Lon 9.1900"

    # Schema per le risposte di errore, basato su GlobalExceptionHandler.java
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          example: 500
        error:
          type: string
          example: "Internal Server Error"
        message:
          type: string
          example: "Si è verificato un errore imprevisto."
        path:
          type: string
          example: "/events/crash-report"